public class AlgebraVectorial {
    private double x, y, z;

    public AlgebraVectorial() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
    }

    public AlgebraVectorial(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public AlgebraVectorial suma(AlgebraVectorial v) {
        return new AlgebraVectorial(this.x + v.x, this.y + v.y, this.z + v.z);
    }

    public AlgebraVectorial escalar(double r) {
        return new AlgebraVectorial(r*this.x, r*this.y, r*this.z);
    }

    public AlgebraVectorial resta(AlgebraVectorial v) {
        return new AlgebraVectorial(this.x - v.x, this.y - v.y, this.z - v.z);
    }

    public double modulo() {
        return Math.sqrt(x*x + y*y + z*z);
    }

    public AlgebraVectorial normalizar() {
        double m = this.modulo();
        if (m == 0) return new AlgebraVectorial(0, 0, 0);
        return new AlgebraVectorial(x/m, y/m, z/m);
    }

    public double productoPunto(AlgebraVectorial v) {
        return this.x*v.x + this.y*v.y + this.z*v.z;
    }

    public AlgebraVectorial productoCruz(AlgebraVectorial v) {
        return new AlgebraVectorial(
            this.y*v.z - this.z*v.y,
            this.z*v.x - this.x*v.z,
            this.x*v.y - this.y*v.x
        );
    }

    public boolean Perpendicular(AlgebraVectorial v) {
        return Math.abs(this.suma(v).modulo() - this.resta(v).modulo()) < 1e-6;
    }

    public boolean PerpendicularAlt1(AlgebraVectorial v) {
        return Math.abs(this.resta(v).modulo() - v.resta(this).modulo()) < 1e-6;
    }

    public boolean PerpendicularAlt2(AlgebraVectorial v) {
        return Math.abs(this.productoPunto(v)) < 1e-6;
    }

    public boolean PerpendicularAlt3(AlgebraVectorial v) {
        double izq = Math.pow(this.suma(v).modulo(), 2);
        double der = Math.pow(this.modulo(), 2) + Math.pow(v.modulo(), 2);
        return Math.abs(izq - der) < 1e-6;
    }

    public boolean Paralelo(AlgebraVectorial v) {
        if (v.x == 0 && v.y == 0 && v.z == 0) return false;
        double rx = (v.x != 0) ? this.x / v.x : 0;
        double ry = (v.y != 0) ? this.y / v.y : 0;
        double rz = (v.z != 0) ? this.z / v.z : 0;
        return (rx == ry || v.y == 0) && (ry == rz || v.z == 0);
    }

    public boolean ParaleloAlt(AlgebraVectorial v) {
        return this.productoCruz(v).modulo() < 1e-6;
    }

    public AlgebraVectorial Proyeccion(AlgebraVectorial b) {
        double escalar = this.productoPunto(b) / Math.pow(b.modulo(), 2);
        return new AlgebraVectorial(b.x * escalar, b.y * escalar, b.z * escalar);
    }

    public double Componente(AlgebraVectorial b) {
        return this.productoPunto(b) / b.modulo();
    }

    @Override
    public String toString() {
        return "(" + x + ", " + y + ", " + z + ")";
    }

    public static void main(String[] args) {
        AlgebraVectorial a = new AlgebraVectorial(3, 0, 0);
        AlgebraVectorial b = new AlgebraVectorial(6, 0, 0);
        AlgebraVectorial c = new AlgebraVectorial(0, 2, 0);

        System.out.println("a: " + a);
        System.out.println("b: " + b);
        System.out.println("c: " + c);

        System.out.println("Perpendicular (a y c): " + a.PerpendicularAlt2(c));
        System.out.println("Paralelos (a y b): " + a.ParaleloAlt(b));
        System.out.println("Proyeccion de a sobre c: " + a.Proyeccion(c));
        System.out.println("Componente de a en c: " + a.Componente(c));
        System.out.println("Normalizar a: " + a.normalizar());
    }
}
